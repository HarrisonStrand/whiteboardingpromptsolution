{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww15920\viewh16280\viewkind0
\deftab720
\pard\pardeftab720\sl480\partightenfactor0

\f0\fs42\fsmilli21333 \cf2 \expnd0\expndtw0\kerning0
Write an algorithm that removes duplicates from an array.\
\'a0\
#nofiltermethod\
\'a0\
Input = [7, 9, "hi", 12, "hi", 7, 53]\
Output = [7, 9, "hi", 12, 53]\
\'a0\
Edge cases - ignore case sensitivity\
\'a0\
Pseudocode/Info\
\'a0\
New Set - elements cannot be repeated by default and they check for equality\
\'85 spread syntax to include all elements of the object\
\'a0\
\'a0\
Function noDups(items) \{   //\'a0[7, 9, "hi", 12, "hi", 7, 53]\
\pard\pardeftab720\li720\sl480\partightenfactor0
\cf2 Let noDupItems = [\'85new Set(items)];   // [7, 9, "hi, 12, 53]\
Return noDupItems;\
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \}\
\'a0\
\'a0\
Function noDups(array) \{\'a0 //\'a0 [7, 9, "hi", 12, "hi", 7, 53]\
\pard\pardeftab720\li720\sl480\partightenfactor0
\cf2 Return array.filter(value, index) => array.IndexOf(value) === index);\
\}\
\'a0\
//[7, 9, "hi", 12, "hi", 7, 53] - values\
\'a0//0\'a0\'a0 1.\'a0\'a0\'a0 2.\'a0\'a0 3.\'a0\'a0\'a0\'a0 4.\'a0\'a0 5.\'a0\'a0 6 - indexes\
\'a0\
}